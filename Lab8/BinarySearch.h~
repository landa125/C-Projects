#ifndef LAB_6_BINARYSEARCHTREE_H
#define LAB_6_BINARYSEARCHTREE_H

#include <cstring>
#include <string>
#include <algorithm>
#include <iostream>
#include <iomanip>

using namespace std;

// BinarySearchTree class
//
// CONSTRUCTION: zero parameter
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x )       --> Insert x
// void remove( x )       --> Remove x
// bool contains( x )     --> Return true if x is present
// Comparable findMin( )  --> Return smallest item
// Comparable findMax( )  --> Return largest item
// boolean isEmpty( )     --> Return true if empty; else false
// void makeEmpty( )      --> Remove all items
// void printTree( )      --> Print tree in sorted order
// ******************ERRORS********************************
// Throws UnderflowException as warranted

template <typename Comparable>
class BinarySearchTree
{
 public:
 BinarySearchTree( ) : root{ nullptr }
  {
  }

  /**
   * Copy constructor
   */
 BinarySearchTree( const BinarySearchTree & rhs ) : root{ nullptr }
  {
    //root = clone( rhs.root );
  }

  /**
   * Move constructor
   */
 BinarySearchTree( BinarySearchTree && rhs ) : root{ rhs.root }
  {
    rhs.root = nullptr;
  }

  /**
   * Destructor for the tree
   */
  ~BinarySearchTree( )
    {
      makeEmpty( );
    }

  /**
   * Copy assignment
   */
  BinarySearchTree & operator=( const BinarySearchTree & rhs )
    {
      BinarySearchTree copy = rhs;
      std::swap( *this, copy );
      return *this;
    }

  /**
   * Move assignment
   */
  BinarySearchTree & operator=( BinarySearchTree && rhs )
    {
      std::swap( root, rhs.root );
      return *this;
    }


  /**
   * Find the smallest item in the tree.
   * Throw UnderflowException if empty.
   */
  const Comparable & findMin( ) const
  {
    if( isEmpty( ) )
      cout << "Empty!\n";
    return findMin( root )->element;
  }

  int findHeight( ) const
  {
    int height = 0;
    if( isEmpty( ) )
      cout << "Empty!\n";
    return findHeight(root, height);
  }

  /**
   * Find the largest item in the tree.
   * Throw UnderflowException if empty.
   */
  const Comparable & findMax( ) const
  {
    if( isEmpty( ) )
      cout << "Empty!\n";
    return findMax( root )->element;
  }

  /**
   * Returns true if x is found in the tree.
   */
  bool contains( const Comparable & x ) const
  {
    return contains( x, root );
  }

  vector<int> getLines( const Comparable & x ) const
    {
      return getLines( x, root );
    }

  /**
   * Test if the tree is logically empty.
   * Return true if empty, false otherwise.
   */
  bool isEmpty( ) const
  {
    return root == nullptr;
  }

  /**
   * Print the tree contents in sorted order.
   */
  void InOrder( vector<int> & List )
  {
    if( isEmpty( ) )
      cout << "Empty tree" << endl;
    else
      InOrder( root, List);
  }

  void outputTree( ofstream & out ) const
  {
    if( isEmpty( ) )
      out << "Empty tree" << endl;
    else
      printTree( root, out );
  }

  /**
   * Make the tree logically empty.
   */
  void makeEmpty( )
  {
    makeEmpty( root );
  }

  /**
   * Insert x into the tree; duplicates are ignored.
   */
  bool insert( const Comparable & x )
  {
    insert(x,root);
  }
  
  int KeyOfRank(int k)
  {
    return KeyOfRank(k, root);
  }

  int RankOfKey(const int x)
  {
    return RankOfKey(x, root);
  }
  
  
  /**
   * Insert x into the tree; duplicates are ignored.
   */
  /*
  void insert( Comparable && x, int line )
  {
    insert( std::move( x ), root, line);
  }
  */
  /**
   * Remove x from the tree. Nothing is done if x is not found.
   */
  void remove( const Comparable & x )
  {
    remove( x, root );
  }

  int size()
  {
    return size(root);
  }

  int depth()
  {
    return depth(root);
  }

 private:
      struct BinaryNode
      {
	Comparable element;
	BinaryNode *left;
	BinaryNode *right;
	int size = 0;
	int height = 0;
	
	//vector<int> row;

	BinaryNode( const Comparable & theElement, BinaryNode *lt, BinaryNode *rt )
	: element{ theElement }, left{ lt }, right{ rt }
	{

	}

	BinaryNode( Comparable && theElement, BinaryNode *lt, BinaryNode *rt )
	: element{ std::move( theElement ) }, left{ lt }, right{ rt }
	{

	}



      };

      BinaryNode *root;

      int size(BinaryNode * n )
      {
	if (n == nullptr)
	  return 0;
	return  n-> size ;
      }

      int depth( BinaryNode * t)
      {
	if ( t == nullptr)
	  return 0;
	return t->height;
      }
      
      /*************************************************************/
      //Algorithm RankOfkey(x,t):

      int RankOfKey(const Comparable & x, BinaryNode * & t)
      {
	if (t == nullptr)
	  {
	    return 0;
	  }
	if (x < t->element)
	  {
	    return RankOfKey(x, t->left);
	  }
	if (x > t->element)
	  {
	    int Rank =  RankOfKey(x, t->right);
	    if (Rank == 0)
	      return Rank;
	    else
	      return 1 + size(t->left) + Rank;
	  }
	
	else if (x == t->element)
	  {
	    return 1 + size(t->left);
	  }
      }

      int KeyOfRank(int k, BinaryNode * & t)
      {
	if (t == nullptr || k < 0 || k > size(t))
	  ;
	if(size(t->left) == k-1)
	  return t->element;
	else if (size(t->left) >= k)
	  return KeyOfRank(k, t->left);
	else
	  return KeyOfRank(k-size(t->left) - 1, t->right);
       	    
      }
      
	    
      /**
       * Internal method to insert into a subtree.
       * x is the item to insert.
       * t is the node that roots the subtree.
       * Set the new root of the subtree.
       */
      bool insert( const Comparable & x, BinaryNode * & t)
      {
	if( t == nullptr )
	  {
	    t = new BinaryNode{x, nullptr, nullptr};
	    t->size = 1;
	    return true;
	  }
	else if( x < t->element )
	  {
	    if (insert( x, t->left))
	      {
		t->size++;
		if(t->height == t->left->height)
		  t->height++;
		return true;
	      }
	  }
	else if( x > t->element  )
	  {
	    if (insert( x, t->right))
	      {
		t->size++;
		if(t->height == t->right->height)
		  t->height++;
		return true;
	      }
	  }
	else if ( x == t->element)
	  {
	    return false;
	  }
	    
      
	
	return false;
      }

      /**
       * Internal method to insert into a subtree.
       * x is the item to insert.
       * t is the node that roots the subtree.
       * Set the new root of the subtree.
       */
      /*
      void insert( Comparable && x, BinaryNode * & t)
      {
	if( t == nullptr ) {
	  vector<int> v;
	  v.push_back(rowNum);
	  t = new BinaryNode{std::move(x), nullptr, nullptr, v};
	}else if( x < t->element )
	  insert( std::move( x ), t->left, rowNum);
	else if( t->element < x )
	  insert( std::move( x ), t->right, rowNum);
	else
	  t->row.push_back(rowNum);  // Duplicate; do nothing
      }
      */

      /**
       * Internal method to remove from a subtree.
       * x is the item to remove.
       * t is the node that roots the subtree.
       * Set the new root of the subtree.
       */
      bool remove( const Comparable & x, BinaryNode * & t )
      {
	if( t == nullptr )
	  return false;   // Item not found; do nothing
	if( x < t->element )
	  {
	    if(remove( x, t->left ))
	      {
		t->size--;
		t->height = 1 + max(depth( t-> left) , depth(t-> right));
		return true;
	      }
	    else
	      return false;
	  }
	
	else if( x > t->element)
	  {
	    if(remove(x, t->right))
	      {
		t->size--;
		t->height = 1 + max(depth( t-> left) , depth(t-> right));
		return true;
	      }
	    else
	      return false;	      
	  }
	else
	  {
	    if (t->left == nullptr && t->right == nullptr )
	      {
		delete t;
		t= NULL;
		return true;
	      }
	    
	    else if( t->left == nullptr && t->right != nullptr ) // Two children
	      {
		BinaryNode * temp = t;
		t = t->right;
		delete temp;
		return true;
	      }
	    else if (t->left != nullptr && t->right == nullptr)
	      {
		BinaryNode * temp = t;
		t = t->left;
		delete temp;
		return true;
	      }
	    else
	    {  	int y = deleteMin(t->right);
		t->element = y;
		t->size--;
		return true;
		}
	}
}
		
	
	      
int deleteMin(BinaryNode *& t)
{		  
  if( t == nullptr )
    ;//return nullptr;
  if( t->left == nullptr)
    {
      int Element = t->element;
      BinaryNode * temp = t;
      t = t->right;
      delete temp;
      return Element;;
    }
  t->size--;
  t->height = max(depth( t-> left) , depth(t-> right) + 1);
  return deleteMin(t->left);
			      
}
	      
      /**
       * Internal method to find the smallest item in a subtree t.
       * Return node containing the smallest item.
     */
      BinaryNode * findMin( BinaryNode *t ) const
      {
	if( t == nullptr )
	  return nullptr;
	if( t->left == nullptr )
	  return t;
	return findMin( t->left );
      }

      int findHeight( BinaryNode *t, int count ) const
      {
	if( t == nullptr )
	  return 0;
	if( t->left == nullptr )
	  return count;

	return findHeight( t->left, count+1 );
      }

      /**
       * Internal method to find the largest item in a subtree t.
       * Return node containing the largest item.
       */
      BinaryNode * findMax( BinaryNode *t ) const
      {
	if( t != nullptr )
	  while( t->right != nullptr )
	    t = t->right;
	return t;
      }

      vector<int> getLines( const Comparable & x, BinaryNode *t ) const
	{
	  if( t == nullptr )
	    return t->row;
	  else if( x < t->element )
	    return getLines( x, t->left );
	  else if( t->element < x )
	    return getLines( x, t->right );
	  else
	    return t->row;    // Match
	}

      /**
       * Internal method to test if an item is in a subtree.
       * x is item to search for.
       * t is the node that roots the subtree.
       */
      bool contains( const Comparable & x, BinaryNode *t ) const
      {
	if( t == nullptr )
	  return false;
	else if( x < t->element )
	  return contains( x, t->left );
	else if( t->element < x )
	  return contains( x, t->right );
	else
	  return true;    // Match
      }
      /****** NONRECURSIVE VERSION*************************
    bool contains( const Comparable & x, BinaryNode *t ) const
    {
        while( t != nullptr )
            if( x < t->element )
                t = t->left;
            else if( t->element < x )
                t = t->right;
            else
                return true;    // Match

        return false;   // No match
    }
      *****************************************************/

      /**
       * Internal method to make subtree empty.
       */
      void makeEmpty( BinaryNode * & t )
      {
	if( t != nullptr )
	  {
	    makeEmpty( t->left );
	    makeEmpty( t->right );
	    delete t;
	  }
	t = nullptr;
      }

      /**
       * Internal method to print a subtree rooted at t in sorted order.
       */
      void InOrder( BinaryNode *t, vector<int> &List ) const
      {
	if( t != nullptr )
	  {
	    InOrder( t->left, List );
	    List.push_back(t->element);
	    cout << "Element: "<< left <<  t->element << "\tSize: " << t->size << "\t\tHeight: " << t->height<<endl; // "\t\t\t";
	    InOrder(t->right, List );
	  }
      }

      void outputTree( BinaryNode *t, ofstream & out ) const
      {
	if( t != nullptr )
	  {
	    outputTree( t->left, out );
	    out << t->element << endl;
	    outputTree( t->right, out );
	  }
      }
      /**
       * Internal method to clone subtree.
       */
      BinaryNode * clone( BinaryNode *t, vector <int> line) const
      {
	if( t == nullptr )
	  return nullptr;
	else
	  return new BinaryNode{ t->element, clone( t->left, line ), clone( t->right, line ) };
      }
};

#endif //LAB_6_BINARYSEARCHTREE_H
