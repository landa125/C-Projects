//File: BinarySearch.hpp
// Name: Eduardo Roman

#include <cstring>
#include <string>
#include <iostream>
#include <iomanip>

template <typename Comparable>

class BinarySearchTree
{
public:
  BinarySearchTree( );
  BinarySearchTree( const BinarySearchTree & rhs );
  BinarySearchTree( BinarySearchTree && rhs );
  ~BinarySearchTree( );

  const Comparable & findMin( ) const;
  const Comparable & findMax( ) const;
  bool contains( const Comparable & x ) const;
  bool isEmpty( ) const;
  void printTree( ostream & out = cout ) const;
  void makeEmpty( );
  void insert( const Comparable & x );
  void insert( Comparable && x );
  void remove( const Comparable & x );

  BinarySearchTree & operator=( const BinarySearchTree & rhs );
  BinarySearchTree & operator=( BinarySearchTree && rhs );

private:
      struct BinaryNode
      {
	Comparable element;
	BinaryNode *left;
	BinaryNode *right;
	vector<int> LineNumber;
	

	BinaryNode( const Comparable & theElement, BinaryNode *lt, BinaryNode *rt )
	  : element{ theElement }, left{ lt }, right{ rt } { }

	BinaryNode( Comparable && theElement, BinaryNode *lt, BinaryNode *rt )
	  : element{ std::move( theElement ) }, left{ lt }, right{ rt } { }
      };

  BinaryNode *root;

  void insert( const Comparable & x, BinaryNode * & t );
  void insert( Comparable && x, BinaryNode * & t );
  void remove( const Comparable & x, BinaryNode * & t );
  BinaryNode * findMin( BinaryNode *t ) const;
  BinaryNode * findMax( BinaryNode *t ) const;
  bool contains( const Comparable & x, BinaryNode *t ) const;
  void makeEmpty( BinaryNode * & t );
  void printTree( BinaryNode *t, ostream & out ) const;
  BinaryNode * clone( BinaryNode *t ) const;
};


/**
 * Returns true if x is found in the tree.
 */
bool contains( const Comparable & x ) const
{
  return contains( x, root );
}

/**
 * Insert x into the tree; duplicates are ignored.
 */
void insert( const Comparable & x )
{
  insert( x, root );
}

/**
 * Remove x from the tree. Nothing is done if x is not found.
 */
void remove( const Comparable & x )
{
  remove( x, root );
}
